import { useState } from "react";
import {
  Card,
  Select,
  Switch,
  Group,
  Divider,
  Button,
  Stack,
  Modal,
  PasswordInput,
  Text,
} from "@mantine/core";
import { useRoutes } from "@/hooks/useRoutes";
import { useNavigate } from "react-router-dom";
import { useForm } from "@mantine/form";
import { useAuth } from "@/app/context/auth-provider/AuthProvider";
import { useLocalStorage } from "@mantine/hooks";
import { toast } from "react-toastify";
import { useChangePassword } from "@/hooks/useChangePassword";

export default function SettingsSection() {
  // üåì —Ç–µ–º–∞: –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ç—É–º–±–ª–µ—Ä, –ø–∏—à–µ—Ç –≤ localStorage('color-scheme')
  const [colorScheme, setColorScheme] = useLocalStorage<"light" | "dark">({
    key: "color-scheme",
    defaultValue: "light",
  });
  const darkMode = colorScheme === "dark";

  const [notifications, setNotifications] = useState(true);
  const [language, setLanguage] = useState("ru");
  const { paths } = useRoutes();
  const navigate = useNavigate();
  const { logout } = useAuth();

  const [modalOpened, setModalOpened] = useState(false);
  const [changeSuccess, setChangeSuccess] = useState(false);

  const { changePassword, isLoading: isChanging } = useChangePassword();

  const form = useForm({
    initialValues: {
      current: "",
      new: "",
    },
    validate: {
      current: (value) => (!value ? "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" : null),
      new: (value) => (value.length < 6 ? "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤" : null),
    },
  });

  const handleSave = () => {
    // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å notifications/language –Ω–∞ –±—ç–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:
    toast.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
  };

  const handleLogout = () => {
    logout();
  };

  const handleChangePassword = async (values: { current: string; new: string }) => {
    const ok = await changePassword(values.current, values.new);
    if (ok) {
      setChangeSuccess(true);
      toast.success("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω");
      setTimeout(() => {
        setModalOpened(false);
        form.reset();
        setChangeSuccess(false);
      }, 1200);
    } else {
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  return (
    <>
      <Card withBorder className="settings-card">
        <h2 className="section-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>

        <div className="settings-group">
          <Group justify="space-between">
            <span className="settings-label">–¢—ë–º–Ω–∞—è —Ç–µ–º–∞</span>
            <Switch
              checked={darkMode}
              onChange={(event) => setColorScheme(event.currentTarget.checked ? "dark" : "light")}
              color="teal"
            />
          </Group>

          <Divider my="sm" />

          <Group justify="space-between">
            <span className="settings-label">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
            <Switch
              checked={notifications}
              onChange={(e) => setNotifications(e.currentTarget.checked)}
              color="teal"
            />
          </Group>

          <Divider my="sm" />

          <Group justify="space-between">
            <span className="settings-label">–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</span>
            <Select
              data={[
                { value: "ru", label: "–†—É—Å—Å–∫–∏–π" },
                { value: "en", label: "English" },
              ]}
              value={language}
              onChange={(val) => setLanguage(val || "ru")}
              className="settings-select"
            />
          </Group>

          <Divider my="md" />

          <Stack>
            <Button fullWidth color="teal" onClick={handleSave}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>

            <Button fullWidth color="teal" onClick={() => setModalOpened(true)}>
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </Button>

            <Button fullWidth color="red" variant="outline" onClick={handleLogout}>
              –í—ã–π—Ç–∏
            </Button>
          </Stack>
        </div>
      </Card>

      <Modal
        opened={modalOpened}
        onClose={() => setModalOpened(false)}
        title="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
        centered
      >
        <form onSubmit={form.onSubmit(handleChangePassword)}>
          <PasswordInput
            label="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π"
            {...form.getInputProps("current")}
            mb="md"
          />

          <PasswordInput
            label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π"
            {...form.getInputProps("new")}
            mb="md"
          />

          {changeSuccess && (
            <Text c="teal" size="sm" mb="sm">
              –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω
            </Text>
          )}

          <Button type="submit" fullWidth color="teal" loading={isChanging}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </form>
      </Modal>
    </>
  );
}
